From 4c2170b3ffb3911d24464fcf18a28e1ac5fc5aad Mon Sep 17 00:00:00 2001
From: Dan Crowell <dcrowell@us.ibm.com>
Date: Wed, 27 Feb 2019 13:58:34 -0600
Subject: [PATCH] Handle early life PNOR fails in HBRT instead of hanging

A hang happens when RtPNOR code creates an error log
while it still hasn't initialized completely. Error log code
calls PNOR code that hasn't completed initialization yet.
The fix is to assert in HBRT and by the time HBRT gets restarted,
PNOR should be present and accessible.

Change-Id: I24a4046be9da921933e7ca9005088945a0c25cfa
---
 src/usr/pnor/runtime/rt_pnor.C | 39 +++++++++++++++++++++++++++++++++-
 src/usr/pnor/runtime/rt_pnor.H | 18 +++++++++++++++-
 2 files changed, 55 insertions(+), 2 deletions(-)

diff --git a/src/usr/pnor/runtime/rt_pnor.C b/src/usr/pnor/runtime/rt_pnor.C
index 617850723..e9bc9c218 100644
--- a/src/usr/pnor/runtime/rt_pnor.C
+++ b/src/usr/pnor/runtime/rt_pnor.C
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2014,2016                        */
+/* Contributors Listed Below - COPYRIGHT 2014,2019                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -89,9 +89,18 @@ void RtPnor::init(errlHndl_t &io_taskRetErrl)
 {
     TRACFCOMP(g_trac_pnor, "RtPnor::init> " );
     io_taskRetErrl  = Singleton<RtPnor>::instance().readTOC();
+    if( !io_taskRetErrl )
+    {
+        Singleton<RtPnor>::instance().setInitialized(true);
+    }
     TRACFCOMP(g_trac_pnor, "<RtPnor::init" );
 }
 /**************************************************************/
+void RtPnor::setInitialized(bool i_initialized)
+{
+    iv_initialized = i_initialized;
+}
+/**************************************************************/
 errlHndl_t RtPnor::getSectionInfo(PNOR::SectionId i_section,
                               PNOR::SectionInfo_t& o_info)
 {
@@ -115,6 +124,10 @@ errlHndl_t RtPnor::getSectionInfo(PNOR::SectionId i_section,
                     "attribute overrides inhibited by secureboot");
             }
             #endif
+            // prevent hang between ErrlManager and rt_pnor
+            assert(iv_initialized,
+                   "RtPnor::getSectionInfo: invalid section error"
+                   " before completing PNOR initialization");
             /*@
              * @errortype
              * @moduleid    PNOR::MOD_RTPNOR_GETSECTIONINFO
@@ -137,6 +150,10 @@ errlHndl_t RtPnor::getSectionInfo(PNOR::SectionId i_section,
         {
             TRACFCOMP(g_trac_pnor,"RtPnor::getSectionInfo: Section %d"
                     " size is 0", (int)i_section);
+            // prevent hang between ErrlManager and rt_pnor
+            assert(iv_initialized,
+                   "RtPnor::getSectionInfo: Section size 0 returned"
+                   " before completing PNOR initialization");
             /*@
              * @errortype
              * @moduleid    PNOR::MOD_RTPNOR_GETSECTIONINFO
@@ -334,6 +351,7 @@ errlHndl_t RtPnor::flush( PNOR::SectionId i_section)
 /*******Protected Methods**************/
 RtPnor::RtPnor()
 {
+    iv_initialized = false;
     errlHndl_t l_err = readTOC();
     if (l_err)
     {
@@ -390,6 +408,11 @@ errlHndl_t RtPnor::readFromDevice (uint64_t i_procId,
                         " failed proc:%d, part:%s, offset:0x%X, size:0x%X,"
                         " dataPt:0x%X, rc:%d", i_procId, l_partitionName,
                         l_offset, l_readSize, l_dataToRead, l_rc);
+
+                // prevent hang between ErrlManager and rt_pnor
+                assert(iv_initialized,
+                       "RtPnor::readFromDevice: pnor_read returned an error"
+                       " during initialization");
                 /*@
                  * @errortype
                  * @moduleid            PNOR::MOD_RTPNOR_READFROMDEVICE
@@ -424,6 +447,10 @@ errlHndl_t RtPnor::readFromDevice (uint64_t i_procId,
                 }
                 else // everything else should have a known size
                 {
+                    // prevent hang between ErrlManager and rt_pnor
+                    assert(iv_initialized,
+                           "RtPnor::readFromDevice: pnor_read failed to read "
+                           "expected amount before rt_pnor initialization");
                     /*@
                      * @errortype
                      * @moduleid            PNOR::MOD_RTPNOR_READFROMDEVICE
@@ -484,6 +511,11 @@ errlHndl_t RtPnor::readFromDevice (uint64_t i_procId,
                 TRACFCOMP(g_trac_pnor,"RtPnor::readFromDevice>"
                     " Uncorrectable ECC error : chip=%d,offset=0x%.X",
                     i_procId, i_offset );
+
+                // prevent hang between ErrlManager and rt_pnor
+                assert(iv_initialized,
+                       "RtPnor::readFromDevice: UNCORRECTABLE_ECC encountered"
+                       " during initialization");
                 /*@
                  * @errortype
                  * @moduleid    PNOR::MOD_RTPNOR_READFROMDEVICE
@@ -516,6 +548,11 @@ errlHndl_t RtPnor::readFromDevice (uint64_t i_procId,
                         TRACFCOMP(g_trac_pnor, "RtPnor::readFromDevice> Error"
                         " writing corrected data back to device");
 
+
+                        // prevent hang between ErrlManager and rt_pnor
+                        assert(iv_initialized,
+                               "RtPnor::readFromDevice: pnor_write returned an"
+                               " error during initialization");
                         /*@
                          * @errortype
                          * @moduleid   PNOR::MOD_RTPNOR_READFROMDEVICE
diff --git a/src/usr/pnor/runtime/rt_pnor.H b/src/usr/pnor/runtime/rt_pnor.H
index 54c1ac9af..f8ce1b4c5 100644
--- a/src/usr/pnor/runtime/rt_pnor.H
+++ b/src/usr/pnor/runtime/rt_pnor.H
@@ -5,7 +5,7 @@
 /*                                                                        */
 /* OpenPOWER HostBoot Project                                             */
 /*                                                                        */
-/* Contributors Listed Below - COPYRIGHT 2014,2015                        */
+/* Contributors Listed Below - COPYRIGHT 2014,2019                        */
 /* [+] International Business Machines Corp.                              */
 /*                                                                        */
 /*                                                                        */
@@ -77,6 +77,19 @@ class RtPnor
         errlHndl_t getSideInfo( PNOR::SideId i_side,
                                 PNOR::SideInfo_t& o_info);
 
+
+        /**
+         * @brief  Has RtPnor::init() successfully completed?
+         * @return true if init() finished successfully, otherwise false
+         */
+        bool isPnorInitialized() { return iv_initialized; }
+
+        /**
+         * @brief  Accessor function for iv_initialized.
+         *         true = RtPnor::init() finished successfully
+         */
+        void setInitialized(bool i_initialized);
+
     protected:
        /**
         * @brief Constructor
@@ -147,6 +160,9 @@ class RtPnor
          */
         errlHndl_t readTOC();
 
+        // is RT pnor initialized?
+        bool iv_initialized;
+
         //allow testcases to see inside the class
         friend class PnorRtTest;
 
-- 
2.21.0.windows.1

