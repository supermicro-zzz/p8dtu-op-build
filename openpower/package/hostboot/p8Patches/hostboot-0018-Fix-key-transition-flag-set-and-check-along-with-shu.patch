From 67ceb5c152e93b7ff7b5efe55e985acbbca2dea3 Mon Sep 17 00:00:00 2001
From: Stephen Cprek <smcprek@us.ibm.com>
Date: Thu, 20 Oct 2016 10:19:46 -0500
Subject: [PATCH] Fix key transition flag set and check along with shutdown
 rule

- Pass the proper flags for key transition into the openPOWER
  signing tool
- Flag bit check was on the nested container when it should
  have been on the outer
- Forced shutdown on any key transition, even if transitioning
  to the same key

Change-Id: Ibc79d68daa8fd5594d2f59083db90df77bb68975
---
 src/build/buildpnor/genPnorImages.pl | 56 +++++++++++++++++++++++-------------
 src/usr/pnor/spnorrp.C               | 16 ++++++-----
 src/usr/pnor/spnorrp.H               |  5 +---
 src/usr/sbe/sbe_update.C             | 56 ++++++++++++++++++++++--------------
 4 files changed, 80 insertions(+), 53 deletions(-)

diff --git a/src/build/buildpnor/genPnorImages.pl b/src/build/buildpnor/genPnorImages.pl
index ce08b75..932850f 100755
--- a/src/build/buildpnor/genPnorImages.pl
+++ b/src/build/buildpnor/genPnorImages.pl
@@ -112,9 +112,6 @@ GetOptions("binDir:s" => \$bin_dir,
            "corrupt:s" => \%partitionsToCorrupt,
            "help" => \$help);
 
-# If in test mode, set key transition
-$key_transition = 1 if($testRun);
-
 if ($help)
 {
     usage();
@@ -207,9 +204,17 @@ my %sb_hdrs = (
         file => "$bin_dir/$randPrefix.phyp.secureboot.hdr.bin"
     },
     SBKT => {
-        flags => sprintf("0x%08X", HB_FW_FLAG | KEY_TRANSITION_FLAG),
-        prefix => $SIGN_SBKT_PREFIX_PARAMS,
-        file => "$bin_dir/$randPrefix.sbkt.secureboot.hdr.bin"
+        outer => {
+            flags => sprintf("0x%08X", HB_FW_FLAG | KEY_TRANSITION_FLAG),
+            prefix => $SIGN_PREFIX_PARAMS,
+            file => "$bin_dir/$randPrefix.sbkt.outer.secureboot.hdr.bin"
+        },
+        inner => {
+            flags => sprintf("0x%08X", HB_FW_FLAG),
+            prefix => $SIGN_SBKT_PREFIX_PARAMS,
+            file => "$bin_dir/$randPrefix.sbkt.inner.secureboot.hdr.bin"
+        }
+
     }
 );
 
@@ -268,9 +273,23 @@ if ($secureboot)
         foreach my $header (keys %sb_hdrs)
         {
             next if($header eq "SBKT" && !$key_transition);
-            run_command("$SIGNING_DIR/prefix -good -of $sb_hdrs{$header}{file}".
-                        LOCAL_SIGNING_FLAG."$sb_hdrs{$header}{flags}".
-                        " $sb_hdrs{$header}{prefix}");
+
+            # SBKT parition has 2 sections outer and inner, need to create both
+            if ($header eq "SBKT")
+            {
+                foreach my $section (keys %{$sb_hdrs{$header}})
+                {
+                    run_command("$SIGNING_DIR/prefix -good -of $sb_hdrs{$header}{$section}{file}".
+                        LOCAL_SIGNING_FLAG."$sb_hdrs{$header}{$section}{flags}".
+                        " $sb_hdrs{$header}{$section}{prefix}");
+                }
+            }
+            else
+            {
+                run_command("$SIGNING_DIR/prefix -good -of $sb_hdrs{$header}{file}".
+                            LOCAL_SIGNING_FLAG."$sb_hdrs{$header}{flags}".
+                            " $sb_hdrs{$header}{prefix}");
+            }
         }
 
         # Generate test containers once and limit to build phase
@@ -625,8 +644,7 @@ sub manipulateImages
             elsif ($eyeCatch eq "SBKT" && $secureboot && $key_transition)
             {
                 $callerHwHdrFields{configure} = 1;
-                create_sb_key_transition_container($openSigningFlags,
-                                                   $tempImages{PAD_PHASE});
+                create_sb_key_transition_container($tempImages{PAD_PHASE});
                 setCallerHwHdrFields(\%callerHwHdrFields, $tempImages{PAD_PHASE});
             }
             # Other partitions fill with FF's if no empty bin file provided
@@ -905,7 +923,7 @@ sub gen_test_containers
 ################################################################################
 sub create_sb_key_transition_container
 {
-    my ($i_opSigningFlags, $o_file) = @_;
+    my ($o_file) = @_;
 
     my $randPrefix = "rand-".POSIX::ceil(rand(0xFFFFFFFF));
     my %tempImages = (
@@ -919,22 +937,20 @@ sub create_sb_key_transition_container
     if($openSigningTool)
     {
         # Create a signed container with new production keys
-        run_command("$OPEN_SIGN_KEY_TRANS_REQUEST "
-            . "$i_opSigningFlags "
-            . "-protectedPayload $tempImages{RAND_BLOB} "
+        run_command("$OPEN_SIGN_KEY_TRANS_REQUEST".OP_SIGNING_FLAG
+            . "$sb_hdrs{SBKT}{inner}{flags} -protectedPayload $tempImages{RAND_BLOB} "
             . "-out $tempImages{PRD_KEY_FILE}");
         # Sign new production key container with imprint keys
-        run_command("$OPEN_SIGN_REQUEST "
-            . "$i_opSigningFlags "
-            . "-protectedPayload $tempImages{PRD_KEY_FILE} "
+        run_command("$OPEN_SIGN_REQUEST ".OP_SIGNING_FLAG
+            . "$sb_hdrs{SBKT}{outer}{flags} -protectedPayload $tempImages{PRD_KEY_FILE} "
             . "-out $o_file");
     }
     else
     {
         # Create a signed container with new production keys
-        run_command("$SIGNING_DIR/build -good -if $sb_hdrs{SBKT}{file} -of $tempImages{PRD_KEY_FILE} -bin $tempImages{RAND_BLOB} $SIGN_BUILD_PARAMS");
+        run_command("$SIGNING_DIR/build -good -if $sb_hdrs{SBKT}{inner}{file} -of $tempImages{PRD_KEY_FILE} -bin $tempImages{RAND_BLOB} $SIGN_BUILD_PARAMS");
         # Sign new production key container with imprint keys
-        run_command("$SIGNING_DIR/build -good -if $sb_hdrs{HB_FW}{file} -of $o_file -bin $tempImages{PRD_KEY_FILE} $SIGN_BUILD_PARAMS");
+        run_command("$SIGNING_DIR/build -good -if $sb_hdrs{SBKT}{outer}{file} -of $o_file -bin $tempImages{PRD_KEY_FILE} $SIGN_BUILD_PARAMS");
     }
 
 
diff --git a/src/usr/pnor/spnorrp.C b/src/usr/pnor/spnorrp.C
index 2da74cb..0889d13 100644
--- a/src/usr/pnor/spnorrp.C
+++ b/src/usr/pnor/spnorrp.C
@@ -747,9 +747,9 @@ errlHndl_t SPnorRP::miscSectionVerification(const uint8_t *i_vaddr,
             l_errl = baseExtVersCheck((i_vaddr + PAGESIZE));
             break;
         case SBKT:
-            // Ensure the SBKT partition has a valid key transition container
-            // Add PAGESIZE to skip outer container
-            l_errl = keyTransitionCheck((i_vaddr + PAGESIZE));
+            // Ensure the outer container of the SBKT partition has a valid key
+            // transition container
+            l_errl = keyTransitionCheck(i_vaddr);
             break;
         default:
             break;
@@ -831,8 +831,8 @@ errlHndl_t SPnorRP::keyTransitionCheck(const uint8_t *i_vaddr) const
 
     do {
     // Check if the header flags have the key transition bit set
-    SECUREBOOT::ContainerHeader l_nestedConHdr(i_vaddr);
-    if (!l_nestedConHdr.sb_flags()->hw_key_transition)
+    SECUREBOOT::ContainerHeader l_outerConHdr(i_vaddr);
+    if (!l_outerConHdr.sb_flags()->hw_key_transition)
     {
         TRACFCOMP( g_trac_pnor, ERR_MRK"SPnorRP::keyTransitionCheck() - Key transition flag not set");
         /*@
@@ -842,7 +842,7 @@ errlHndl_t SPnorRP::keyTransitionCheck(const uint8_t *i_vaddr) const
          * @reasoncode      RC_KEY_TRAN_FLAG_UNSET
          * @userdata1       0
          * @userdata2       0
-         * @devdesc         Key transition flag not set in nested SBKT container containing new hw keys
+         * @devdesc         Key transition flag not set in outer SBKT container containing new hw keys
          * @custdesc        Secureboot key transition failure
          */
          l_errl = new ERRORLOG::ErrlEntry( ERRORLOG::ERRL_SEV_CRITICAL_SYS_TERM,
@@ -857,7 +857,9 @@ errlHndl_t SPnorRP::keyTransitionCheck(const uint8_t *i_vaddr) const
     }
 
     // Validate nested container is properly signed using new hw keys
-    l_errl = SECUREBOOT::verifyContainer(const_cast<uint8_t*>(i_vaddr),
+    uint8_t * l_nestedVaddr = const_cast<uint8_t*>(i_vaddr) + PAGESIZE;
+    SECUREBOOT::ContainerHeader l_nestedConHdr(l_nestedVaddr);
+    l_errl = SECUREBOOT::verifyContainer(l_nestedVaddr,
                                          l_nestedConHdr.hwKeyHash());
     if (l_errl)
     {
diff --git a/src/usr/pnor/spnorrp.H b/src/usr/pnor/spnorrp.H
index 9f7e533..843b684 100644
--- a/src/usr/pnor/spnorrp.H
+++ b/src/usr/pnor/spnorrp.H
@@ -178,10 +178,7 @@ class SPnorRP
     /**
      * @brief  Check if SBKT is properly formatted to then provide the new HW
      *         key hash to transition the system to.
-     * @param[in]  i_vaddr - vaddr points to start SBKT's nested container
-     *                       NOTE: Since this expects the vaddr to point to the
-     *                       start of the nested container, the outer secureboot
-     *                       header must be skipped prior by the caller.
+     * @param[in]  i_vaddr - vaddr points to start of the SBKT container
      *                       NULL will assert
      * @return  errlHndl_t - NULL if success, errlHndl_t otherwise.
      */
diff --git a/src/usr/sbe/sbe_update.C b/src/usr/sbe/sbe_update.C
index 27b0917..4499ca2 100644
--- a/src/usr/sbe/sbe_update.C
+++ b/src/usr/sbe/sbe_update.C
@@ -47,6 +47,7 @@
 #include <sys/msg.h>
 #include <hwas/common/deconfigGard.H>
 #include <initservice/initserviceif.H>
+#include <initservice/initsvcreasoncodes.H>
 #include <console/consoleif.H>
 #include <config.h>
 #include <sbe/sbeif.H>
@@ -422,8 +423,8 @@ namespace SBE
             /**************************************************************/
             /*  Perform System Operation                                  */
             /**************************************************************/
-            // Restart IPL if SBE Update requires it
-            if ( l_restartNeeded == true )
+            // Restart IPL if SBE Update requires it or key transition occurred
+            if ( l_restartNeeded == true || g_do_hw_keys_hash_transition )
             {
                 TRACFCOMP( g_trac_sbe,
                            INFO_MRK"updateProcessorSbeSeeproms(): Restart "
@@ -465,22 +466,39 @@ namespace SBE
 #endif
 
 #ifdef CONFIG_CONSOLE
-            if(!g_do_hw_keys_hash_transition)
-            {
-                CONSOLE::displayf(SBE_COMP_NAME, "System Rebooting To "
-                                  "Perform SBE Update\n");
-
-                CONSOLE::flush();
-            }
+                if(g_do_hw_keys_hash_transition)
+                {
+                    CONSOLE::displayf(SBE_COMP_NAME, "Performing Secureboot Key Transition\n");
+                    CONSOLE::displayf(SBE_COMP_NAME, "System will power off after completion\n");
+                    CONSOLE::flush();
+                }
+                else
+                {
+                    CONSOLE::displayf(SBE_COMP_NAME, "System Rebooting To "
+                                      "Perform SBE Update\n");
+                    CONSOLE::flush();
+                }
 #endif
 
 #ifndef CONFIG_BMC_IPMI
-                TRACFCOMP( g_trac_sbe,
-                           INFO_MRK"updateProcessorSbeSeeproms(): Calling "
-                           "INITSERVICE::doShutdown() with "
-                           "SBE_UPDATE_REQUEST_REIPL = 0x%X",
-                           SBE_UPDATE_REQUEST_REIPL );
-                INITSERVICE::doShutdown(SBE_UPDATE_REQUEST_REIPL);
+                if(g_do_hw_keys_hash_transition)
+                {
+                    TRACFCOMP( g_trac_sbe,
+                               INFO_MRK"updateProcessorSbeSeeproms(): Performing Secureboot Key Transition Calling "
+                               "INITSERVICE::doShutdown() with SHUTDOWN_NOT_RECONFIG_LOOP = 0x%X",
+                               INITSERVICE::SHUTDOWN_NOT_RECONFIG_LOOP );
+                    INITSERVICE::doShutdown(INITSERVICE::
+                                            SHUTDOWN_NOT_RECONFIG_LOOP);
+                }
+                else
+                {
+                    TRACFCOMP( g_trac_sbe,
+                               INFO_MRK"updateProcessorSbeSeeproms(): Calling "
+                               "INITSERVICE::doShutdown() with "
+                               "SBE_UPDATE_REQUEST_REIPL = 0x%X",
+                               SBE_UPDATE_REQUEST_REIPL );
+                    INITSERVICE::doShutdown(SBE_UPDATE_REQUEST_REIPL);
+                }
 #endif
             }
 
@@ -4742,13 +4760,7 @@ errlHndl_t determineHwKeysHash(const void* i_imgPtr,
                    g_hw_keys_hash_transition_data,
                    SBE_HW_KEY_HASH_SIZE);
 
-            // Copy from Struct to customized image below 
-
-        #ifdef CONFIG_CONSOLE
-            CONSOLE::displayf(SBE_COMP_NAME, "Performing Secureboot Key Transition\n");
-            CONSOLE::displayf(SBE_COMP_NAME, "System will power off after completion\n");
-            CONSOLE::flush();
-        #endif
+            // Copy from Struct to customized image below
 
         }
 
-- 
1.8.2.2

